#!/bin/bash

set -e

print_header()
{
  local header="$1"
  local light_purple=13
  echo "$(tput setaf $light_purple)"
  echo "################################################################################"
  echo " $header"
  echo "################################################################################"
  echo "$(tput sgr0)"
}

warn()
{
  local warning="$1"
  local orange="3"

  echo "$(tput setaf $orange)"
  echo " WARNING: $warning"
  echo "$(tput sgr0)"
}

error()
{
  local error="$1"
  local red=1

  echo "$(tput setaf $red)"
  echo " ERROR: $error"
  echo "$(tput sgr0)"
  exit 1
}

print_done()
{
  local message="$1"
  local green=2
  echo "$(tput setaf $green)"
  echo " $message$(tput sgr0)"
}

name=$1
config_file=$2
fresh_install=

requirements_error="Please install ruby, bundler and chef first"
which ruby >/dev/null 2>&1 || error "Can't find ruby. $requirements_error"
which gem >/dev/null 2>&1 || error "Can't find gem. $requirements_error"
which chef-solo >/dev/null 2>&1 || error "Can't find chef. $requirements_error"

VAGRANT_BOX="opscode-ubuntu-12.04"
VAGRANT_BOX_URL="https://opscode-vm-bento.s3.amazonaws.com/vagrant/opscode_ubuntu-12.04_provisionerless.box"
PLATFORM_NAME="ubuntu"
PLATFORM_VERSION="12.04"
CHEF_VERSION="11.8.0"

if [ -r "$config_file" ]; then
  echo "Using configuration file $config_file"
  source "$config_file"
fi

print_header "Using berks to create cookbook"

BERKS=$(which berks)
if [ "$?" -ne "0" ]; then
  gem install berkshelf
fi

if [ -d "$name" ]; then
  print_done "Directory '$name' already exists, skipping."
else
  fresh_install=1
  berks cookbook "$name"
fi

pushd "$name" >/dev/null 2>&1

if [ $fresh_install ]; then
  print_header "Installing required gems"
  cat <<-EOF > Gemfile
source 'https://rubygems.org'

gem "berkshelf", github: "berkshelf/berkshelf"
gem 'test-kitchen'
gem 'kitchen-vagrant'
gem 'rspec'
gem 'leibniz', :git => 'git://github.com/zeroXten/leibniz.git', :branch => 'custom_boxes'
gem 'rubocop'
gem 'foodcritic'
gem 'serverspec'
gem 'chefspec'
EOF
  print_done "Done"
fi

bundle install

if [ $fresh_install ]; then
  print_header "Configuring Vagrant"
  vagrant_file="Vagrantfile"
  cat <<EOF > $vagrant_file
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.hostname = "${name}"
  config.vm.box = "${VAGRANT_BOX}"
EOF

  if [ -n "$VAGRANT_BOX_URL" ]; then
    echo "config.vm.box_url = \"${VAGRANT_BOX_URL}\"" >> $vagrant_file
  fi

  cat <<EOF >> $vagrant_file
  config.vm.network :private_network, ip: "33.33.33.10"
  config.berkshelf.enabled = true
  config.vm.provision :chef_solo do |chef|
    chef.run_list = [
        "recipe[${name}::default]"
    ]
  end
end
EOF
  print_done "Done"
fi

if [ $fresh_install ]; then
  print_header "Configuring rubocop"
  cat <<-EOF > .rubocop.yml
LineLength:
  Max: 119
TrailingWhitespace:
  Enabled: false
TrailingBlankLines:
  Enabled: false
EOF
fi

if [ $fresh_install ]; then
  print_header "Configuring test-kitchen"
  kitchen_file=".kitchen.yml"
  if [ -e "$kitchen_file" ]; then
    rm $kitchen_file
  fi

  kitchen init

  cat <<EOF > $kitchen_file
---
driver:
  name: vagrant

provisioner:
  name: chef_solo

platforms:
  - name: ${VAGRANT_BOX}
    driver_config:
      box: ${VAGRANT_BOX}
EOF

  if [ -n "$VAGRANT_BOX_URL" ]; then
    cat <<EOF >> $kitchen_file
      box_url: ${VAGRANT_BOX_URL}
EOF
  fi

  cat <<EOF >> $kitchen_file
suites:
  - name: default
    run_list:
      - recipe[${name}::default]
      - recipe[minitest-handler]
    attributes:

settings:
  parallel: true
EOF
  print_done "Done"
fi

print_header "Configuring minitest"

if [ $fresh_install ]; then
  cat <<-EOF >> "Berksfile"
group :dev, :test do
  cookbook 'minitest-handler'
end
EOF
fi

if [ ! -d "files/default/test" ]; then
  mkdir "files/default/test"
fi

if [ $fresh_install ]; then
  cat <<-EOF > "files/default/test/default_test.rb"
require 'chef/mixin/shell_out'
include Chef::Mixin::ShellOut

# Documentation can be found here:
#  https://github.com/seattlerb/minitest
#  http://docs.seattlerb.org/minitest/

# Basic tests
class TestBasics < MiniTest::Chef::TestCase
  def test_true
    cmd = shell_out 'true'
    assert_equal(cmd.exitstatus, 0)
  end

  def test_false
    cmd = shell_out 'false'
    assert_equal(cmd.exitstatus, 1)
  end
end
EOF
  print_done "Done"
fi

if [ $fresh_install ]; then
  print_header "Configuring leibniz"
  mkdir -p features/support
  mkdir -p features/step_definitions

  cat <<-EOF > "features/support/env.rb"
require 'leibniz'
require 'rspec'
EOF


  cat <<-EOF > "features/${name}.feature"
Feature: Test all the devops

  In order to be super effective
  As an infrastructure engineer
  I want to use all the awesome tools

Background:

  Given I have provisioned the following infrastructure:
  | Server Name         | Operating System    | Version   | Box | Run List         |
  | ${name}-${PLATFORM_NAME//./_}-${PLATFORM_VERSION//./_}   | ${PLATFORM_NAME}              | ${PLATFORM_VERSION}       | ${VAGRANT_BOX} | ${name}::default |
  And I have run Chef

Scenario: System has bash
  When I look for "bash"
  Then I should see "/bin/bash"
EOF

  cat <<-'EOF' > "features/step_definitions/${name}_steps.rb"
Given(/^I have provisioned the following infrastructure:$/) do |specification|
  @infrastructure = Leibniz.build(specification)
end

Given(/^I have run Chef$/) do
  @infrastructure.destroy
  @infrastructure.converge
end

When(/^I look for "(.*?)"$/) do |arg1|
  @which_output = `which #{arg1}`.strip
end

Then(/^I should see "(.*?)"$/) do |arg1|
  @which_output.should == arg1
end
EOF
  print_done "Done"
fi

print_header "Creating Rakefile"
cat <<-EOF > "Rakefile"
task :foodcritic do
  sh "foodcritic ."
end

task :rubocop do
  sh "rubocop"
end

task :kitchen_test do
  sh "kitchen test"
end

task :cucumber do
  sh "cucumber"
end

task :lint => [ :foodcritic, :rubocop ]
task :test => [ :kitchen_test ]
task :spec => [ :cucumber ]
task :full => [ :lint, :test, :spec ]
EOF
print_done "Done"

popd > /dev/null 2>&1

print_done "All done finished. Run 'cd $name; rake full' to start full test suite."

exit 0
